/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.github.xjln.xjlnintellijplugin;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.xjln.xjlnintellijplugin.psi.XJLNTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_XJLNLexer.flex</tt>
 */
public class _XJLNLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\3\1\22\0\1\3\1\10\1\13\1\12\1\0\2\10\1\11\2\0\1\10\1\6\1\40"+
    "\1\10\1\7\1\10\12\5\2\0\3\10\2\0\32\4\3\0\1\10\2\0\1\23\1\25\1\27\1\24\1\16"+
    "\1\17\1\36\1\35\1\30\2\4\1\33\1\22\1\31\1\21\2\4\1\20\1\15\1\26\1\14\1\32"+
    "\1\34\1\4\1\37\1\4\1\0\1\10\10\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\2\6\3\1"+
    "\16\4\1\7\1\5\2\0\1\10\1\11\1\0\1\12"+
    "\11\4\1\13\7\4\1\14\1\15\3\4\1\16\1\17"+
    "\1\20\1\4\1\21\2\4\1\22\4\4\1\23\5\4"+
    "\1\24\2\4\1\25\3\4\1\26\1\27\2\4\1\30"+
    "\3\4\1\31\1\4\1\32\1\33\1\4\1\34\1\4"+
    "\1\35\1\36\4\4\1\37\1\40\1\41\1\42\1\4"+
    "\1\43\2\4\1\44\1\45";

  private static int [] zzUnpackAction() {
    int [] result = new int[111];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\41\0\102\0\143\0\204\0\245\0\306"+
    "\0\347\0\u0108\0\u0129\0\u014a\0\u016b\0\u018c\0\u01ad\0\u01ce"+
    "\0\u01ef\0\u0210\0\u0231\0\u0252\0\u0273\0\u0294\0\u02b5\0\u02d6"+
    "\0\u02f7\0\41\0\u0318\0\u0339\0\u035a\0\u037b\0\u039c\0\u0129"+
    "\0\41\0\u03bd\0\u03de\0\u03ff\0\u0420\0\u0441\0\u0462\0\u0483"+
    "\0\u04a4\0\u04c5\0\143\0\u04e6\0\u0507\0\u0528\0\u0549\0\u056a"+
    "\0\u058b\0\u05ac\0\143\0\u05cd\0\u05ee\0\u060f\0\u0630\0\u0339"+
    "\0\41\0\143\0\u0651\0\143\0\u0672\0\u0693\0\143\0\u06b4"+
    "\0\u06d5\0\u06f6\0\u0717\0\143\0\u0738\0\u0759\0\u077a\0\u079b"+
    "\0\u07bc\0\143\0\u07dd\0\u07fe\0\143\0\u081f\0\u0840\0\u0861"+
    "\0\143\0\143\0\u0882\0\u08a3\0\143\0\u08c4\0\u08e5\0\u0906"+
    "\0\143\0\u0927\0\143\0\143\0\u0948\0\143\0\u0969\0\143"+
    "\0\143\0\u098a\0\u09ab\0\u09cc\0\u09ed\0\143\0\143\0\143"+
    "\0\143\0\u0a0e\0\143\0\u0a2f\0\u0a50\0\143\0\143";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[111];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\5\1\21\1\22\1\23\1\24\1\5\1\25\1\26"+
    "\1\5\1\27\1\30\1\31\3\5\1\32\44\0\1\4"+
    "\41\0\2\5\6\0\24\5\6\0\1\33\1\0\1\34"+
    "\37\0\1\10\1\34\1\10\36\0\1\10\1\0\1\10"+
    "\30\0\1\35\2\0\36\35\2\36\1\0\7\36\1\37"+
    "\26\36\13\40\1\41\25\40\4\0\2\5\6\0\1\5"+
    "\1\42\22\5\5\0\2\5\6\0\21\5\1\43\2\5"+
    "\5\0\2\5\6\0\15\5\1\44\1\5\1\45\4\5"+
    "\5\0\2\5\6\0\4\5\1\46\1\47\11\5\1\50"+
    "\4\5\5\0\2\5\6\0\2\5\1\51\21\5\5\0"+
    "\2\5\6\0\7\5\1\52\14\5\5\0\2\5\6\0"+
    "\1\5\1\53\7\5\1\54\12\5\5\0\2\5\6\0"+
    "\2\5\1\55\2\5\1\56\16\5\5\0\2\5\6\0"+
    "\5\5\1\57\15\5\1\60\5\0\2\5\6\0\5\5"+
    "\1\61\13\5\1\62\2\5\5\0\2\5\6\0\3\5"+
    "\1\63\11\5\1\64\6\5\5\0\2\5\6\0\7\5"+
    "\1\65\14\5\5\0\2\5\6\0\5\5\1\66\16\5"+
    "\5\0\2\5\6\0\21\5\1\67\2\5\6\0\1\33"+
    "\40\0\1\70\44\0\1\71\27\0\2\36\1\0\36\36"+
    "\2\37\1\0\36\37\4\0\2\5\6\0\2\5\1\72"+
    "\21\5\5\0\2\5\6\0\5\5\1\73\16\5\5\0"+
    "\2\5\6\0\10\5\1\74\13\5\5\0\2\5\6\0"+
    "\1\5\1\75\22\5\5\0\2\5\6\0\5\5\1\76"+
    "\16\5\5\0\2\5\6\0\4\5\1\77\17\5\5\0"+
    "\2\5\6\0\5\5\1\100\16\5\5\0\2\5\6\0"+
    "\12\5\1\101\11\5\5\0\2\5\6\0\14\5\1\102"+
    "\7\5\5\0\2\5\6\0\1\5\1\103\22\5\5\0"+
    "\2\5\6\0\3\5\1\104\20\5\5\0\2\5\6\0"+
    "\1\105\23\5\5\0\2\5\6\0\5\5\1\106\16\5"+
    "\5\0\2\5\6\0\12\5\1\107\11\5\5\0\2\5"+
    "\6\0\15\5\1\110\6\5\5\0\2\5\6\0\7\5"+
    "\1\111\14\5\5\0\2\5\6\0\12\5\1\112\1\5"+
    "\1\113\1\114\6\5\5\0\2\5\6\0\4\5\1\115"+
    "\17\5\5\0\2\5\6\0\15\5\1\116\6\5\5\0"+
    "\2\5\6\0\14\5\1\117\7\5\5\0\2\5\6\0"+
    "\4\5\1\120\17\5\5\0\2\5\6\0\2\5\1\121"+
    "\21\5\5\0\2\5\6\0\6\5\1\122\15\5\5\0"+
    "\2\5\6\0\7\5\1\123\14\5\5\0\2\5\6\0"+
    "\1\124\23\5\5\0\2\5\6\0\15\5\1\125\6\5"+
    "\5\0\2\5\6\0\12\5\1\126\11\5\5\0\2\5"+
    "\6\0\11\5\1\127\12\5\5\0\2\5\6\0\17\5"+
    "\1\130\4\5\5\0\2\5\6\0\2\5\1\131\21\5"+
    "\5\0\2\5\6\0\1\5\1\132\22\5\5\0\2\5"+
    "\6\0\4\5\1\133\17\5\5\0\2\5\6\0\12\5"+
    "\1\134\11\5\5\0\2\5\6\0\2\5\1\135\21\5"+
    "\5\0\2\5\6\0\22\5\1\136\1\5\5\0\2\5"+
    "\6\0\17\5\1\137\4\5\5\0\2\5\6\0\12\5"+
    "\1\140\11\5\5\0\2\5\6\0\12\5\1\141\11\5"+
    "\5\0\2\5\6\0\4\5\1\142\17\5\5\0\2\5"+
    "\6\0\4\5\1\143\17\5\5\0\2\5\6\0\17\5"+
    "\1\144\4\5\5\0\2\5\6\0\2\5\1\145\21\5"+
    "\5\0\2\5\6\0\12\5\1\146\11\5\5\0\2\5"+
    "\6\0\4\5\1\147\17\5\5\0\2\5\6\0\2\5"+
    "\1\150\21\5\5\0\2\5\6\0\15\5\1\151\6\5"+
    "\5\0\2\5\6\0\7\5\1\152\14\5\5\0\2\5"+
    "\6\0\2\5\1\153\21\5\5\0\2\5\6\0\7\5"+
    "\1\154\14\5\5\0\2\5\6\0\13\5\1\155\10\5"+
    "\5\0\2\5\6\0\15\5\1\156\6\5\5\0\2\5"+
    "\6\0\12\5\1\157\11\5\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2673];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\26\1\1\11\1\1\2\0\2\1\1\0"+
    "\1\11\27\1\1\11\66\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[111];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _XJLNLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _XJLNLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 38: break;
          case 2: 
            { return NEW_LINE;
            } 
            // fall through
          case 39: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 40: break;
          case 4: 
            { return IDENTIFIER;
            } 
            // fall through
          case 41: break;
          case 5: 
            { return INTEGER;
            } 
            // fall through
          case 42: break;
          case 6: 
            { return OPERATOR;
            } 
            // fall through
          case 43: break;
          case 7: 
            { return COMMA;
            } 
            // fall through
          case 44: break;
          case 8: 
            { return COMMENT;
            } 
            // fall through
          case 45: break;
          case 9: 
            { return DOC;
            } 
            // fall through
          case 46: break;
          case 10: 
            { return STRING;
            } 
            // fall through
          case 47: break;
          case 11: 
            { return KEYWORD_AS;
            } 
            // fall through
          case 48: break;
          case 12: 
            { return KEYWORD_IF;
            } 
            // fall through
          case 49: break;
          case 13: 
            { return KEYWORD_IN;
            } 
            // fall through
          case 50: break;
          case 14: 
            { return NUMBER;
            } 
            // fall through
          case 51: break;
          case 15: 
            { return CHAR;
            } 
            // fall through
          case 52: break;
          case 16: 
            { return KEYWORD_USE;
            } 
            // fall through
          case 53: break;
          case 17: 
            { return KEYWORD_END;
            } 
            // fall through
          case 54: break;
          case 18: 
            { return KEYWORD_FOR;
            } 
            // fall through
          case 55: break;
          case 19: 
            { return KEYWORD_DEF;
            } 
            // fall through
          case 56: break;
          case 20: 
            { return KEYWORD_INT;
            } 
            // fall through
          case 57: break;
          case 21: 
            { return KEYWORD_VAR;
            } 
            // fall through
          case 58: break;
          case 22: 
            { return KEYWORD_ELSE;
            } 
            // fall through
          case 59: break;
          case 23: 
            { return KEYWORD_FROM;
            } 
            // fall through
          case 60: break;
          case 24: 
            { return KEYWORD_MAIN;
            } 
            // fall through
          case 61: break;
          case 25: 
            { return KEYWORD_BYTE;
            } 
            // fall through
          case 62: break;
          case 26: 
            { return KEYWORD_CHAR;
            } 
            // fall through
          case 63: break;
          case 27: 
            { return KEYWORD_INIT;
            } 
            // fall through
          case 64: break;
          case 28: 
            { return KEYWORD_LONG;
            } 
            // fall through
          case 65: break;
          case 29: 
            { return KEYWORD_SHORT;
            } 
            // fall through
          case 66: break;
          case 30: 
            { return KEYWORD_FLOAT;
            } 
            // fall through
          case 67: break;
          case 31: 
            { return KEYWORD_CONST;
            } 
            // fall through
          case 68: break;
          case 32: 
            { return KEYWORD_INNER;
            } 
            // fall through
          case 69: break;
          case 33: 
            { return KEYWORD_WHILE;
            } 
            // fall through
          case 70: break;
          case 34: 
            { return KEYWORD_RETURN;
            } 
            // fall through
          case 71: break;
          case 35: 
            { return KEYWORD_DOUBLE;
            } 
            // fall through
          case 72: break;
          case 36: 
            { return KEYWORD_BOOLEAN;
            } 
            // fall through
          case 73: break;
          case 37: 
            { return KEYWORD_ABSTRACT;
            } 
            // fall through
          case 74: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
