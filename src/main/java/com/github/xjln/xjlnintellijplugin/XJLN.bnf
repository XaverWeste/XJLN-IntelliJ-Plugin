{
  parserClass="com.github.xjln.xjlnintellijplugin.XJLNParser"
  parserUtilClass="com.github.xjln.xjlnintellijplugin.XJLNParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="XJLN"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.xjln.xjlnintellijplugin.psi"
  psiImplPackage="com.github.xjln.xjlnintellijplugin.psi.impl"

  elementTypeHolderClass="com.github.xjln.xjlnintellijplugin.psi.XJLNTypes"
  elementTypeClass="com.github.xjln.xjlnintellijplugin.psi.XJLNElementType"
  tokenTypeClass="com.github.xjln.xjlnintellijplugin.psi.XJLNTokenType"

  tokens = [
    //Keywords
    USE = "use"
    FROM = "from"
    AS = "as"
    DEF = "def"
    INNER = "inner"
    CONST = "const"
    VAR = "var"
    MAIN = "main"
    END = "end"

    COMMA = ","

    NEW_LINE = "regexp:\n"
    IDENTIFIER = "regexp:[a-zA-Z][a-zA-Z0-9]*"
    OPPERATOR = "regexp:[-+*/%&|<>=!^]+"
    DOUBLE = "regexp:[0-9]+\.[0-9]+"
    INT = "regexp:[0-9]+"
    CHAR = "regexp:'.'"
    COMMENT = "regexp:#[^\n]*"
    STRING = "regexp:\"[^\"]*\""
  ]
}

xjlnFile ::= argument? (NEW_LINE argument?)*
private argument ::= (COMMENT | use | main | enum | class | method | field)
private use ::= USE (('{' IDENTIFIER (COMMA IDENTIFIER)* '}' FROM IDENTIFIER ('/' IDENTIFIER)*) | (IDENTIFIER (('/' IDENTIFIER)+ | (FROM IDENTIFIER ("/" IDENTIFIER)*)) (AS IDENTIFIER)?))
private enum ::= DEF IDENTIFIER '=' IDENTIFIER ('|' IDENTIFIER)*
private class ::= DEF IDENTIFIER '[' (('/') | (parameterList?))']' ('->' methodCall)? ('=>' objectCreation (COMMA objectCreation)*)? NEW_LINE (statement? NEW_LINE)* END
private parameterList ::= field (COMMA field)*
private field ::= INNER? CONNST? ((type IDENTIFIER ('=' calc)?) | (IDENTIFIER '=' calc))
private type ::= (IDENTIFIER | ('[' IDENTIFIER ']') | VAR | ('{' IDENTIFIER (COMMA IDENTIFIER)*'}'))
private statement ::= (COMMENT | field | method)
private calc ::= calcArg (OPPERATOR calcArg)*
private calcArg ::= (INT | DOUBLE | STRING | CHAR | call)
private call ::= (methodCall | objectCreation | arrayCreation | IDENTIFIER) (':' (methodCall | IDENTIFIER))*
private methodCall ::= IDENTIFIER '(' (calc (COMMA calc)*)? ')'
private objectCreation ::= IDENTIFIER '[' (calc (COMMA calc)*)? ']'
private arrayCreation ::= '[' IDENTIFIER COMMA INT (COMMA INT)* ']'
private method ::= DEF INNER? IDENTIFIER '(' parameterList? ')' ('::' IDENTIFIER)? ((('=' | '->') calc) | (NEW_LINE (statement? NEW_LINE)* END))
private main ::= MAIN (('->' calc) | (NEW_LINE (statement NEW_LINE)* END))