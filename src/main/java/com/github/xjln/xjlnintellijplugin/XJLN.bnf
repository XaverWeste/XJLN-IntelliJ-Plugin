{
  parserClass="com.github.xjln.xjlnintellijplugin._XJLNParser"
  parserUtilClass="com.github.xjln.xjlnintellijplugin.XJLNParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="XJLN"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.xjln.xjlnintellijplugin.psi"
  psiImplPackage="com.github.xjln.xjlnintellijplugin.psi.impl"

  elementTypeHolderClass="com.github.xjln.xjlnintellijplugin.psi.XJLNTypes"
  elementTypeClass="com.github.xjln.xjlnintellijplugin.psi.XJLNElementType"
  tokenTypeClass="com.github.xjln.xjlnintellijplugin.psi.XJLNTokenType"

  tokens = [
    //Keywords
    KEYWORD_USE = "use"
    KEYWORD_FROM = "from"
    KEYWORD_AS = "as"
    KEYWORD_DEF = "def"
    KEYWORD_PUBLIC = "public"
    KEYWORD_PROTECTED = "protected"
    KEYWORD_PRIVATE = "private"
    KEYWORD_STATIC = "static"
    KEYWORD_ABSTRACT = "abstract"
    KEYWORD_FINAL = "final"
    KEYWORD_SYNCHRONISED = "synchronised"
    KEYWORD_CLASS = "class"
    KEYWORD_DATA = "data"
    KEYWORD_TYPE = "type"
    KEYWORD_INTERFACE = "interface"
    KEYWORD_CONST = "const"
    KEYWORD_INIT = "init"
    KEYWORD_RETURN = "return"
    KEYWORD_END = "end"
    KEYWORD_IF = "if"
    KEYWORD_ELSE = "else"
    KEYWORD_WHILE = "while"
    KEYWORD_INT = "int"
    KEYWORD_DOUBLE = "double"
    KEYWORD_FLOAT = "float"
    KEYWORD_LONG = "long"
    KEYWORD_SHORT = "short"
    KEYWORD_BOOLEAN = "boolean"
    KEYWORD_CHAR = "char"
    KEYWORD_BYTE = "byte"

    NEW_LINE = "regexp:\n"
    IDENTIFIER = "regexp:[a-zA-Z][a-zA-Z0-9]*"
    NUMBER = "regexp:[0-9]+\.[0-9]*[idslf]?"
    OPERATOR = "regexp:[-+*/%&|<>=!^]+"
    CHAR = "regexp:'.'"
    COMMENT = "regexp:#[^[#\n]]*#?"
    STRING = "regexp:\"[^\"]*\""
  ]
}

xjlnFile ::= argument? (NEW_LINE argument?)*

argument ::= use | field | data | type | interface | clazz | method | COMMENT

use ::= KEYWORD_USE (single_use | multi_use)
single_use ::= ((class_name KEYWORD_FROM path) | path) (KEYWORD_AS alias)?
class_name ::= IDENTIFIER
alias ::= IDENTIFIER
multi_use ::= "{" class_name ("," class_name)* "}" KEYWORD_FROM path
path ::= IDENTIFIER ("/" IDENTIFIER)*

data ::= data_type_def KEYWORD_CONST? KEYWORD_DATA clazz_name "=" "[" parameterlist? "]"
type ::= data_type_def KEYWORD_TYPE clazz_name "=" type_value ("|" type_value)*
interface ::= KEYWORD_DEF access_modifier? KEYWORD_ABSTRACT? KEYWORD_INTERFACE clazz_name "{" ((abstract_method | COMMENT)? NEW_LINE)* "}"
clazz ::= KEYWORD_DEF access_modifier? KEYWORD_CLASS (KEYWORD_ABSTRACT | KEYWORD_FINAL)* clazz_name "{" ((field | abstract_method | method | COMMENT)? NEW_LINE)* "}"

clazz_name ::= IDENTIFIER
type_value ::= IDENTIFIER

data_type_def ::= KEYWORD_DEF access_modifier? KEYWORD_FINAL?

field ::= access_modifier? KEYWORD_STATIC? datatype IDENTIFIER ("=" value)?
abstract_method ::= KEYWORD_DEF access_modifier? KEYWORD_ABSTRACT IDENTIFIER "(" parameterlist? ")" ("::" datatype)?
method ::= KEYWORD_DEF access_modifier? (KEYWORD_STATIC | KEYWORD_SYNCHRONISED)* IDENTIFIER "(" parameterlist? ")" ("::" datatype)? NEW_LINE KEYWORD_END

access_modifier ::= KEYWORD_PUBLIC | KEYWORD_PROTECTED | KEYWORD_PRIVATE

parameterlist ::= parameter ("," parameter)*
parameter ::= datatype IDENTIFIER

datatype ::= IDENTIFIER | KEYWORD_INT | KEYWORD_SHORT | KEYWORD_LONG | KEYWORD_FLOAT | KEYWORD_DOUBLE | KEYWORD_BOOLEAN | KEYWORD_CHAR | KEYWORD_BYTE
value ::= CHAR | NUMBER | STRING