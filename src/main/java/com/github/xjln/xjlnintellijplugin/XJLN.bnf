{
  parserClass="com.github.xjln.xjlnintellijplugin.XJLNParser"
  parserUtilClass="com.github.xjln.xjlnintellijplugin.XJLNParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="XJLN"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.xjln.xjlnintellijplugin.psi"
  psiImplPackage="com.github.xjln.xjlnintellijplugin.psi.impl"

  elementTypeHolderClass="com.github.xjln.xjlnintellijplugin.psi.XJLNTypes"
  elementTypeClass="com.github.xjln.xjlnintellijplugin.psi.XJLNElementType"
  tokenTypeClass="com.github.xjln.xjlnintellijplugin.psi.XJLNTokenType"

  tokens = [
    NEW_LINE = "regexp:\n"
    IDENTIFIER = "regexp:[a-zA-Z][a-zA-Z0-9]*"
    OPPERATOR = "regexp:[-+*/%&|<>=!^]+"
    DOUBLE = "regexp:[0-9]+\.[0-9]+"
    INT = "regexp:[0-9]+"
    CHAR = "regexp:'.'"
    COMMENT = "regexp:#[^\n]*"
    STRING = "regexp:\"[^\"]*\""
  ]
}

xjlnFile ::= (NEW_LINE* argument  (NEW_LINE argument?)*)?
private argument ::= (COMMENT | use | main | enum | class | method | field)
private use ::= 'use' (('{' IDENTIFIER (',' IDENTIFIER)* '}' 'from' IDENTIFIER ('/' IDENTIFIER)*) | (IDENTIFIER (('/' IDENTIFIER)+ | ('from' IDENTIFIER ("/" IDENTIFIER)*)) ('as' IDENTIFIER)?))
private enum ::= 'def' IDENTIFIER '=' IDENTIFIER ('|' IDENTIFIER)*
private class ::= 'def' IDENTIFIER '[' parameterList? ']' ('->' methodCall)? ('=>' objectCreation (',' objectCreation)*)? NEW_LINE (statement NEW_LINE)* 'end'
private parameterList ::= field (',' field)*
private field ::= 'inner'? 'const'? ((type IDENTIFIER ('=' calc)?) | (IDENTIFIER '=' calc))
private type ::= (IDENTIFIER | ('[' IDENTIFIER ']'))
private statement ::= (COMMENT | NEW_LINE | field | method)
private calc ::= calcArg (OPPERATOR calcArg)*
private calcArg ::= (INT | DOUBLE | STRING | CHAR | call)
private call ::= (methodCall | objectCreation | arrayCreation | IDENTIFIER) (':' (methodCall | IDENTIFIER))*
private methodCall ::= IDENTIFIER '(' (calc (',' calc)*)? ')'
private objectCreation ::= IDENTIFIER '[' (calc (',' calc)*)? ']'
private arrayCreation ::= '[' IDENTIFIER ',' INT (',' INT)* ']'
private method ::= 'def' IDENTIFIER '(' parameterList ')' ('::' IDENTIFIER)? ((('=' | '->') calc) | (NEW_LINE (statement NEW_LINE)* 'end'))
private main ::= 'main' (('->' calc) | (NEW_LINE (statement NEW_LINE)* 'end'))